<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Gordon Shotwell</title>
    <link>/post/index.xml</link>
    <description>Recent content in Posts on Gordon Shotwell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Feb 2017 21:48:51 -0700</lastBuildDate>
    <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>R for Excel Users</title>
      <link>/post/r_for_excel_users/</link>
      <pubDate>Thu, 02 Feb 2017 21:48:51 -0700</pubDate>
      
      <guid>/post/r_for_excel_users/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;Like most people, I first learned to work with numbers through an Excel spreadsheet. After graduating with an undergraduate philosophy degree, I somehow convinced a medical device marketing firm to give me a job writing Excel reports on the orthopedic biomaterials market. When I first started I remember not knowing how to to anything, but after a few months I became fairly proficient with the tool, and was able to build all sorts of useful models. When you think about it, this is an amazing feature of Excel. Every day, all over the world people open up a spreadsheet to do some data entry and then, bit by bit, learn to do increasingly complex analytical tasks. Excel is a master at teaching people how to use excel.&lt;/p&gt;
&lt;p&gt;R is not like that. I learned to use R as a side project during law school and it felt a bit like training with an abusive kung-fu master in the mountains of rural China.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../img/pai_mei.gif&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;I couldn’t get R to do anything. It wouldn’t read in files, draw a plot or multiply two numbers together. All I could do was generate mystifying errors and get mocked on Stack Overflow for asking redundant questions. This was all made more frustrating by the fact that I could accomplish all of these things in Excel without much difficulty.&lt;/p&gt;
&lt;p&gt;This is the basic pain of learning to program. Programming languages are designed to be general in their application and to allow you to accomplish a huge variety of complex tasks with the same basic set of tools. The cost of this generality is a steep learning curve. When you start learning to do basic tasks in R, you are also learning how to do complex things down the road. As you learn more and more the marginal cost of complex analyses goes down. Excel is the opposite, and is very easy at the beginning, but the marginal cost goes up with the complexity of the problem. If you were to graph this it might look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/r_for_excel_users/figures/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;At the beginning, when you are trying to accomplish simple things like balancing a budget or entering some data by hand, R is definitely harder to learn than Excel. However, as the task gets more and more complex, it becomes easier to accomplish it in R than Excel, because the core structures of Excel are designed for relatively simple use cases and don’t work well best for more complex problems. This isn’t to say that you can’t solve a lot of complex problems with Excel, it’s just that the tool won’t make it easy for you.&lt;/p&gt;
&lt;p&gt;For a lot of us, the pain of learning to program feels like the pain of failure. When the program gives you an incomprehensible error message it feels like its telling you that you’re stupid and lack programming aptitude. But after programming for a while you learn that nobody really understands those errors, and everybody feels like an imposter when their program fails. The pain you feel is not the pain of failure, it’s just the pain of learning.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../img/learning_not_failing.gif&#34; /&gt;

&lt;/div&gt;
&lt;div id=&#34;why-is-learning-new-things-so-hard&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Why is learning new things so hard?!&lt;/h2&gt;
&lt;p&gt;The difficulty of learning a new tool is caused by two obstacles:&lt;/p&gt;
&lt;div id=&#34;obstacle-1-the-tool-is-different-from-what-you-know&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Obstacle #1: The tool is different from what you know&lt;/h4&gt;
&lt;p&gt;When you know how to use something you have this vast amount of basic vocabulary about that tool. I haven’t used Excel seriously for six years but I can still remember all of its hot-keys, formula names, and menu structures. When you’re learning a new tool you don’t know any of this stuff, and that automatically makes it more difficult. Additionally, you might know where to look to find help on the old tool, or how to Google questions in such a way that you find useful answers. You don’t know any of these things about the new tool, which is painful.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;obstacle-2-the-mental-model-underlying-the-tool-is-different-from-your-current-mental-model&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Obstacle #2: The mental model underlying the tool is different from your current mental model&lt;/h4&gt;
&lt;p&gt;The way the new tool wants you to think about the problem is different from the way you are used to thinking about the problem. For instance, if you are used to putting your analysis in a rectangular grid, then moving to a tool which is designed around procedural commands is going to be difficult.&lt;/p&gt;
&lt;p&gt;In my opinion obstacle #2 is by far the larger barrier for Excel users. Most of the people who learn R have some basis in programming. The mental models underlying languages like Matlab or Python as well as statistical packages like SPSS and SAS have a lot in common with R, and there are many resources available for translating the bits which don’t make sense. Excel makes you think about analytical problems in a very different way, and there aren’t very many resources for translating the two paradigms.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;four-fundamental-differences-between-r-and-excel&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Four Fundamental Differences Between R and Excel&lt;/h2&gt;
&lt;div id=&#34;text-based-analysis&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;1) Text-based analysis&lt;/h4&gt;
&lt;p&gt;Excel is based on the physical spreadsheet, or accountant’s ledger. This was a large piece of paper with rows and columns. Records were stored in the first column on the left, calculations on those records were stored in the boxes to the right, and the sum of those calculations was totaled at the bottom. I would call this a referential model of computation which has a few qualities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The data and computation are usually stored in the same place&lt;/li&gt;
&lt;li&gt;Data is identified by its location on the grid. Usually you don’t name a data range in excel, but instead refer to it by its location, for instance with &lt;code&gt;$A1:C$36&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The calculations are usually the same shape as the data. In other words if you want to multiply 20 numbers stored in cells &lt;code&gt;A1:An&lt;/code&gt; by 2 you will need 20 calculations: &lt;code&gt;=A1 * 2, =A2 * 2, ...., =An * 2&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Text based data analysis is different:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data and computation are separate. You have one file which stores the data and another file which stores the commands which tell the program how to manipulate that data. This leads to a procedural kind of model in which the raw data is fed through a set of instructions and the output pops out the other side.&lt;/li&gt;
&lt;li&gt;Data is generally referenced by name. Instead of having a dataset which lives in the range of &lt;code&gt;$A1:C$36&lt;/code&gt; you name the data set when you read it in, and refer to it by that name whenever you want to do something with it. You can do this with Excel by naming ranges of cells, but most people don’t do this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;data-structures&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;2) Data structures&lt;/h4&gt;
&lt;p&gt;Excel has only one basic data structure: the cell. Cells are extremely flexible in that they can store numeric, character, logical or formula information. The cost of this flexibility is unpredictability. For instance you can store the character “6” in a cell when you mean to store the number &lt;code&gt;6&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The basic R data structure is a vector. You can think of a vector like a column in an Excel spreadsheet with the limitation that all the data in that vector much be of the same type. If it is a character vector, then every element must be a character, if it is a logical vector then every element must be &lt;code&gt;TRUE&lt;/code&gt; or &lt;code&gt;FALSE&lt;/code&gt;, if it’s numeric then you can trust that every element is a number. There’s no such constraint in Excel, you might have a column which has a bunch of numbers, but then some explanatory test intermingled with the numbers. This isn’t allowed in R.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;iteration&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;3) Iteration&lt;/h4&gt;
&lt;p&gt;Iteration is one of the most powerful features of programming languages and is a big adjustment for Excel users. Iteration is just getting the computer to do the same thing over and over again for some period of time. Maybe you want to draw the same graph based on fifty different data sets, or read and filter a lot of data tables. In a programming language like R you write a script which works for all of the cases which you want to apply it to, and then tell the computer to do the application.&lt;/p&gt;
&lt;p&gt;Excel analysts typically do a lot of this iteration themselves. For instance if an Excel analyst wanted to combine ten different &lt;code&gt;.xls&lt;/code&gt; files into one big file they would probably open each one individually, copy the data, and paste it into a master spreadsheet. The analyst is effectively taking the place of a &lt;code&gt;for&lt;/code&gt; loop by doing one thing over and over again until a condition is met.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;simplification-through-abstraction&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;4) Simplification through abstraction&lt;/h4&gt;
&lt;p&gt;Another major difference is that programming encourages you to simplify your analysis by abstracting common functions from that analysis. In the example above you might find that you have to read in the same type of files over and over again and check that they have the right number of rows. R allows you to write a function which does this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;read_and_check &amp;lt;- function(file){
  out &amp;lt;- read.csv(file)
  if(nrow(out) == 0) {
    stop(&amp;quot;There&amp;#39;s no data in this file!&amp;quot;)
  } else {
    out
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All this function does is read in a &lt;code&gt;.csv&lt;/code&gt; file and then check to see if it has more than zero rows, if it doesn’t it returns an error, otherwise it returns the file (which is called “out”). This is a powerful approach because it helps you save time and reduce errors. For instance if you want to check if the file has more than 23 rows, you only have to change the condition in one place rather than in several spreadsheets.&lt;/p&gt;
&lt;p&gt;There’s really no analog for these kinds of functions in an Excel-based workflow, and when most analysts get to this point they just start writing VBA code to do some of this work.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;example-joining-two-tables-together&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Example: Joining two tables together&lt;/h3&gt;
&lt;p&gt;I thought I’d illustrate these principles by working through the example of joining two tables together in Excel and R. Let’s say that we had two data tables, one with some information about cars and another with the colour of those cars, and we want to join the two of them together. For the purpose of this exercise we’re going to assume that the number of cylinders in a car determines it’s colour.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
library(knitr)
cars &amp;lt;- mtcars
colours &amp;lt;- data_frame(
  cyl = unique(cars$cyl),
  colour = c(&amp;quot;Blue&amp;quot;, &amp;quot;Green&amp;quot;, &amp;quot;Eggplant&amp;quot;)
)

kable(cars[1:10, ]) #kable is just for displaying the table&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mpg&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;cyl&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;disp&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;hp&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;drat&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;wt&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;qsec&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;vs&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;am&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;gear&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;carb&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Mazda RX4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;160.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;110&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.90&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.620&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.46&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Mazda RX4 Wag&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;160.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;110&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.90&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.875&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Datsun 710&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;108.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;93&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.85&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.320&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.61&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Hornet 4 Drive&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;258.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;110&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.08&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.215&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19.44&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Hornet Sportabout&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;360.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;175&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.440&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Valiant&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;225.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;105&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.76&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.460&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Duster 360&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;360.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;245&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.21&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.570&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15.84&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Merc 240D&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;146.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;62&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.69&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.190&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Merc 230&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;140.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;95&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.92&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.150&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.90&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Merc 280&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;167.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;123&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.92&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.440&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.30&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;kable(colours)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;cyl&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;colour&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Blue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Green&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Eggplant&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In Excel you would probably do this using the &lt;code&gt;VLOOKUP()&lt;/code&gt; function, which takes a key, and a range, and then looks up the value of that key within that range. I put together an example spreadsheet of this approach &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1K2IqdXX2MoUB4BorRcBcruS7spCvRtDwqXV-4gYAob4/edit?usp=sharing&#34;&gt;here&lt;/a&gt;. Notice that in each lookup cell I typed some version of &lt;code&gt;=vlookup(C4,$H$2:$I$5, 2, FALSE)&lt;/code&gt;. This illustrates a few things. First the calculation is the same shape as the data, and happens in the same file as the data. We have as many formulas as we have things that we want to lookup, and they are placed right next to the dataset. If you’ve used this approach you can probably remember making mistakes in the process of writing and filling this formula. Second, the data is referred to by its address on the sheet. If we move the lookup table to another sheet, or another place on this sheet that is going to screw up out lookup. Third, notice that the first entry of the &lt;code&gt;cyl&lt;/code&gt; column in the spreadsheet store in &lt;code&gt;C2&lt;/code&gt; is stored as text, which causes error in the lookup function. In R you would have to store all the calendar values as a numeric or character vector.&lt;/p&gt;
&lt;p&gt;To do the same thing in R we would use this code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;left_join(cars, colours, by = &amp;quot;cyl&amp;quot;) %&amp;gt;% 
  filter(row_number() %in% 1:10) %&amp;gt;% # to display only a subset of the data
  kable() &lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;mpg&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;cyl&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;disp&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;hp&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;drat&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;wt&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;qsec&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;vs&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;am&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;gear&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;carb&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;colour&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;21.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;160.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;110&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.90&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.620&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.46&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Blue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;21.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;160.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;110&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.90&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.875&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Blue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;22.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;108.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;93&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.85&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.320&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.61&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Green&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;21.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;258.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;110&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.08&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.215&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19.44&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Blue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;18.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;360.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;175&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.440&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Eggplant&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;18.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;225.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;105&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.76&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.460&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Blue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;14.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;360.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;245&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.21&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.570&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15.84&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Eggplant&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;24.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;146.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;62&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.69&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.190&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Green&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;22.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;140.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;95&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.92&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.150&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.90&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Green&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;19.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;167.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;123&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.92&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.440&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.30&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Blue&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here we refer to the data by its name, use one function to operate on the whole table rather than row by row. Because consistency is enforced for each vector there’s no character in the first place.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;iteration-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Iteration&lt;/h3&gt;
&lt;p&gt;Now let’s say we wanted to get the mean displacement for each colour of car. Most Excel users would probably do this iteration manually, first selecting the table and sorting it by colour and then picking out the ranges that they wanted to average. A more sophisticated analyst would probably use the &lt;code&gt;averageif()&lt;/code&gt; function to pick out the criteria they wanted to average on, and so avoid a few errors. Both approaches are implemented in the &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1K2IqdXX2MoUB4BorRcBcruS7spCvRtDwqXV-4gYAob4/edit#gid=364351786&#34;&gt;iteration&lt;/a&gt; tab of the spreadsheet.&lt;/p&gt;
&lt;p&gt;In R you would do something like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;left_join(cars, colours, by = &amp;quot;cyl&amp;quot;) %&amp;gt;% 
  group_by(colour) %&amp;gt;% 
  summarize(mean_displacement = mean(disp)) %&amp;gt;% 
  kable()&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;colour&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean_displacement&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Blue&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;183.3143&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Eggplant&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;353.1000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Green&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;105.1364&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;What this does is takes the data set, splits it up by the grouping variable, in this case colour, then applies the function in the &lt;code&gt;summarize&lt;/code&gt; function to each group. Again, the difference is that we’re always referring to things by name rather than location, there is one line of code which applies the function to the whole dataset, and all of the iterative actions are stored in the script.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;generalizing-through-functions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Generalizing through functions&lt;/h3&gt;
&lt;p&gt;Functions are among the more difficult parts of learning to program, and you really can get by for quite a long time without ever learning to use them. I wanted to include them just because they are commonly used and can be quite discouraging for Excel users because they are totally foreign to their workflow. A function is a way of using existing code on new objects. In the case above it might look like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;join_and_summarize &amp;lt;- function(df, colour_df){
  left_join(df, colour_df, by = &amp;quot;cyl&amp;quot;) %&amp;gt;% 
    group_by(colour) %&amp;gt;% 
    summarize(mean_displacement = mean(disp))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The things between the &lt;code&gt;function()&lt;/code&gt; braces (&lt;code&gt;df&lt;/code&gt; and &lt;code&gt;colour_df&lt;/code&gt;) are called “arguments”, and when you call the function all it does is take the actual objects you supply to the function and plugs them in to wherever that argument appears between the curly braces. In this case we would plug in &lt;code&gt;cars&lt;/code&gt; for the &lt;code&gt;df&lt;/code&gt; argument, and &lt;code&gt;colours&lt;/code&gt; for the &lt;code&gt;colour_df&lt;/code&gt; argument. The function then basically replaces all the &lt;code&gt;df&lt;/code&gt; with &lt;code&gt;cars&lt;/code&gt; and &lt;code&gt;colour_df&lt;/code&gt; with &lt;code&gt;colours&lt;/code&gt; and then evaluated the code.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;join_and_summarize(cars, colours) %&amp;gt;% 
  kable() &lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;colour&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean_displacement&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Blue&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;183.3143&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Eggplant&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;353.1000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Green&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;105.1364&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Excel users have a strong mental model of how data analysis works, and this makes learning to program more difficult. However, learning to program will allow you to do things that you can’t do easily in Excel, and it really is worth the pain of learning the new model.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;../img/pai_mei_silloutette.gif&#34; /&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;!-- BLOGDOWN-HEAD




/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
  </channel>
</rss>
